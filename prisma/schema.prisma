generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id(map: "users_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  email         String     @unique(map: "users_email_key")
  password      String
  image         String?
  phone         String?
  emailverified DateTime?  @db.Timestamptz(6)
  accounts      accounts[]
}

model about_content {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title             String
  about_desc        String?
  about_image       String?
  banner_image      String?
  about_summary     String?
  accordion_content accordion_content[]
}

model accordion_content {
  id               BigInt        @id @default(autoincrement())
  about_content_id String        @db.Uuid
  content_title    String
  content_body     String
  about_content    about_content @relation(fields: [about_content_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_about_content")
}

model accounts {
  id               BigInt  @id @default(autoincrement())
  user_id          String  @db.Uuid
  type             String
  provider         String?
  provider_account String?
  refresh_token    String?
  access_token     String?
  User             User    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model homepage_images {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  banner_image String
  alt          String
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
}

model product_categories {
  id            BigInt   @id @default(autoincrement())
  product_id    String   @db.Uuid
  category_name String
  products      products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_product")
}

model products {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title              String
  description        String?
  price              Float?
  featured           Boolean?
  image              String?
  category           String?
  product_categories product_categories[]
}
